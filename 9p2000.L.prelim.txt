9p2010.L Protocol

As mentioned above, this extension will be adding a new set of operations and they need to be implemented in the Linux kernel to operate with the corresponding server.
statfs - get file system statistics

SYNOPSIS 
size[4] Tstatfs tag[2] fid[4] 
size[4] Rstatfs tag[2] type[4] bsize[4] blocks[8] bfree[8] bavail[8] files[8] ffree[8] fsid[8] namelen[4] 

DESCRIPTION 
The statfs message is used to request file system information returned by the statfs(2) system call, which is used by df(1) to report file system and disk space usage.
rename - change name of file or directory

SYNOPSIS 
size[4] Trename tag[2] fid[4] newdirfid[4] name[s] 
size[4] Rrename tag[2] 

DESCRIPTION 
The rename message is used to change the name of a file, possibly moving it to a new directory. The 9P wstat message can only rename a file within the same directory.
readdir - Read directory contents

SYNOPSIS 
size[4] Treaddir tag[2] fid[4] offset[8] count[4] 
size[4] Rreaddir tag[2] count[4] data[count] 

DESCRIPTION 
The readdir request asks the server to read the directory specified by ' at an offset specified by 'offset' and return as many dirent structures possible that fit into count bytes. Each dirent structure is laid out as
follows. 
qid.type[1]: the type of the file (directory, etc.), represented as a bit vector corresponding to the high 8 bits of the file's mode word. 
qid.vers[4]: version number for given path 
qid.path[8]: the file server's unique identification for the file 
offset[8]: offset into the next dirent. 
type[1]: type of this directory entry. 
name[256]: name of this directory entry. 
getattr- Get filesystem object attributes

SYNOPSIS 
size[4] Tgetattr tag[2] fid[4] request_mask[8] 
size[4] Rgetattr tag[2] lstat[n] 

DESCRIPTION 
The getattr transaction inquires about the file identified by request_mask is a bit mask that specifies which fields of the stat structure is the client interested in. The reply will contain a machine-independent directory entry, laid out as follows:
st_result_mask[8]
Bit mask that indicates which fields in the stat structu have been populated by the server
qid.type[1]
the type of the file (directory, etc.), represented as a vector corresponding to the high 8 bits of the file's mo word.
qid.vers[4]
version number for given path
qid.path[8]
the file server's unique identification for the file
st_mode[4]
Permission and flags
st_uid[4]
User id of owner
st_gid[4]
Group ID of owner
st_nlink[8]
Number of hard links
st_rdev[8]
Device ID (if special file)
st_size[8]
Size, in bytes
st_blksize[8]
Block size for file system IO
st_blocks[8]
Number of file system blocks allocated
st_atime_sec[8]
Time of last access, seconds
st_atime_nsec[8]
Time of last access, nanoseconds
st_mtime_sec[8]
Time of last modification, seconds
st_mtime_nsec[8]
Time of last modification, nanoseconds
st_ctime_sec[8]
Time of last status change, seconds
st_ctime_nsec[8]
Time of last status change, nanoseconds
st_btime_sec[8]
Time of creation (birth) of file, seconds
st_btime_nsec[8]
Time of creation (birth) of file, nanoseconds
st_gen[8]
Inode generation
st_data_version[8]
Data version number
request_mask and result_mask bit masks contain the following 
#define P9_STATS_MODE 0x00000001ULL 
#define P9_STATS_NLINK 0x00000002ULL 
#define P9_STATS_UID 0x00000004ULL 
#define P9_STATS_GID 0x00000008ULL 
#define P9_STATS_RDEV 0x00000010ULL 
#define P9_STATS_ATIME 0x00000020ULL 
#define P9_STATS_MTIME 0x00000040ULL 
#define P9_STATS_CTIME 0x00000080ULL 
#define P9_STATS_INO 0x00000100ULL 
#define P9_STATS_SIZE 0x00000200ULL 
#define P9_STATS_BLOCKS 0x00000400ULL 
#define P9_STATS_BTIME 0x00000800ULL 
#define P9_STATS_GEN 0x00001000ULL 
#define P9_STATS_DATA_VERSION 0x00002000ULL 
#define P9_STATS_BASIC 0x000007ffULL 
#define P9_STATS_ALL 0x00003fffULL 
setattr - Sets attributes for filesystem objects

SYNOPSIS 
size[4] Tsetattr tag[2] attr[n] 
size[4] Rsetattr tag[2] [[ BR]] 
DESCRIPTION 
The setattr command changes some of the file status information. attr resembles the iattr structure used in Linux kernel. It specifies which status parameter is to be changed and to what value. It is laid out as follows:
valid[4]
specifies which status information is to be changed. Possible values are:
ATTR_MODE (1 << 0) ATTR_UID (1 << 1) ATTR_GID (1 << 2) ATTR_SIZE (1 << 3) ATTR_ATIME (1 << 4) ATTR_MTIME (1 << 5) ATTR_ATIME_SET (1 << 7) ATTR_MTIME_SET (1 << 8) The last two bits represent whether the time information is being sent by the client's user space. In the absense of these bits the server always uses server's time.
mode[4]
File permission bits
uid[4]
Owner id of file
gid[4]
Group id of the file
size[8]
File size
atime_nsec[8]
Time of last file access, nanoseconds
mtime_sec[8]
Time of last file modification, seconds
mtime_nsec[8]
Time of last file modification, nanoseconds
link

SYNOPSIS 
size[4] Tlink tag[2] dfid[4] oldfid[4] newpath[s] 
size[4] Rlink tag[2] 
DESCRIPTION 
Create a link 'newpath' in directory pointed by dfid linking to oldfid path.
symlink

SYNOPSIS 
size[4] Tsymlink tag[2] fid[4] name[s] symtgt[s] gid[4] 
size[4] Rsymlink tag[2] qid[13] 

DESCRIPTION 
Create a symbolic link named 'name' pointing to 'symtgt'. gid represents the effective group id of the caller. The permissions of a symbolic link are irrelevant hence it is omitted from the protocol.
mknod

Synopsis 
size[4] Tmknod tag[2] fid[4] name[s] mode[4] major[4] minor[4] gid[4] 
size[4] Rmknod tag[2] qid[13] 

Description 
mknod asks the file server to create a device node with given major and minor number, mode and gid. The qid for the new device node is returned with the mknod reply message.
create

SYNOPSIS 
size[4] Tlcreate tag[2] fid[4] name[s] flags[4] mode[4] gid[4] 
size[4] Rlcreate tag[2] qid[13] iounit[4] 

DESCRIPTION 
The Tlreate request asks the file server to create a new regular file with the name supplied, in the directory (dir) represented by fid. The mode argument specifies the permissions to use. New file is created with the uid if the fid and with supplied gid. The flags argument represent Linux access mode flags with which the caller is requesting to open the file with. Protocol allows all the Linux access modes but it is upto the server to allow/disallow any of these acess modes. If the server doesn't support any of the access mode, it is expected to return error.
open

SYNOPSIS: 
size[4] Tlopen tag[2] fid[4] mode[4] 
size[4] Rlopen tag[2] qid[13] iounit[4] 

TXATTRWALK: Descend a ATTR namespace

SYNOPSIS 
size[4] TXATTRWALK tag[2] fid[4] newfid[4] name[s] 
size[4] RXATTRWALK tag[2] size[8] 
DESCRIPTION 
txattrwalk gets a fid pointing to xattr. This fid can later be used to read the xattr value. If name is NULL the fid returned can be used to get the list of extended attribute associated to the file system object.
TXATTRCREATE: Prepare a fid for setting xattr value on a file system object

SYNOPSIS 
size[4] TXATTRCREATE tag[2] fid[4] name[s] attr_size[8] flags[4] 
size[4] RXATTRCREATE tag[2] 

DESCRIPTION 
txattrcreate gets a fid pointing to xattr. This fid can later be used to set the xattr value. flag value is derived from set Linux setxattr. The manpage says "The flags parameter can be used to refine the semantics of the operation. XATTR_CREATE specifies a pure create, which fails if the named attribute exists already. XATTR_REPLACE specifies a pure replace operation, which fails if the named attribute does not already exist. By default (no flags), the extended attribute will be created if need be, or will simply replace the value if the attribute exists." The actual setxattr operation happens when the fid is clunked. At that point the written byte count and the attr_size specified in TXATTRCREATE should be same otherwise an error will be returned.
fsync

SYNOPSIS 
size[4] Tfsync tag[2] fid[4] datasync[4] 
size[4] Rfsync tag[2] 

DESCRIPTION 
The Tfsync transaction transfers ("flushes") all modified in-core data of file identified by fid to the disk device (or other permanent storage device) where that file resides. If datasync flag is specified data will be fleshed but does not flush modified metadata unless that metadata is needed in order to allow subsequent data retrieval to be correctly handled.
Lock

SYNOPSIS 
size[4] TLock tag[2] fid[4] flock[n] 
size[4] RLock tag[2] status[1] 
Description 
Tlock is used to acquire/release byte range posix locks on a file identified by given fid. The reply contains status of the lock request
flock structure:
type[1] - Type of lock: F_RDLCK, F_WRLCK, F_UNLCK 
flags[4] - Flags could be either of 
P9_LOCK_FLAGS_BLOCK - Blocked lock request, if there is a conflicting lock exists, wait for that lock to be released. 
P9_LOCK_FLAGS_RECLAIM - Reclaim lock request, used when client is trying to reclaim a lock after a server restrart (due to crash) 
start[8] - Starting offset for lock 
length[8] - Number of bytes to lock 
If length is 0, lock all bytes starting at the location 'start' through to the end of file
pid[4] - PID of the process that wants to take lock 
client_id[4] - Unique client id 
status[1] - Status of the lock request, can be
P9_LOCK_SUCCESS(0), P9_LOCK_BLOCKED(1), P9_LOCK_ERROR(2) or
P9_LOCK_GRACE(3) 
P9_LOCK_SUCCESS - Request was successful 
P9_LOCK_BLOCKED - A conflicting lock is held by another process 
P9_LOCK_ERROR - Error while processing the lock request 
P9_LOCK_GRACE - Server is in grace period, it can't accept new loc
requests in this period (except locks with P9_LOCK_FLAGS_RECLAIM flag set)
getlock

Synopsis 
size[4] TGetlock tag[2] fid[4] getlock[n] 
size[4] RGetlock tag[2] getlock[n] 

Description 
TGetlock is used to test for the existence of byte range posix locks on a fi identified by given fid. The reply contains getlock structure. If the lock c be placed it returns F_UNLCK in type field of getlock structure. Otherwise returns the details of the conflicting locks in the getlock structure
getlock structure:
type[1] - Type of lock: F_RDLCK, F_WRLCK 
start[8] - Starting offset for lock 
length[8] - Number of bytes to check for the lock
If length is 0, check for lock in all bytes starting at the loc
'start' through to the end of file 
pid[4] - PID of the process that wants to take lock/owns the task
in case of reply 
client[4] - Client id of the system that owns the process which
has the conflicting lock 
Readlink - Reads symbolic link

Synopsis 
size[4] TReadlink tag[2] fid[4] 
size[4] RReadlink tag[2] target[s] 

Description 
Readlink is used to return the contents of the symoblic link
referred by fid. Contents of symboic link is returned as a
response. 
target[s] - Contents of the symbolic link referred by fid.
